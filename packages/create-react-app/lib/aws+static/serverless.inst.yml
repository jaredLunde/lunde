# NOTE:
# All variables are here:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <:PKG_NAME:>-s3-site

provider:
  name: aws
  # must be defined although unused
  runtime: nodejs10.x
  stage: ${opt:stage, 'staging'}
  # AWS profile to use when deploying
  profile: <:PROFILE:>
  # AWS region to deploy into
  region: us-east-1 <:if DEPLOYMENT_BUCKET.length > 0:>
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: <:DEPLOYMENT_BUCKET:>
    serverSideEncryption: AES256
  <:fi:># The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts

# SEE: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html
resources:
  Resources:
    # Creates a static site bucket named after the domain name
    StaticSiteS3Bucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.stage.s3Bucket}
        WebsiteConfiguration:
          IndexDocument: index.html
    # Creates a bucket policy for the static site bucket
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      # Waits for the bucket to be created before attaching its policy
      DependsOn:
        - StaticSiteS3Bucket
      Properties:
        Bucket:
          # The Ref returned by StaticSiteS3Bucket is the name of the bucket
          Ref: StaticSiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::", {"Ref": "StaticSiteS3Bucket"}, "/*"]]
    # Sets up the CloudFront distribution
    # This is necessary to deliver the static website over HTTPS, as S3 only allows
    # static sites of HTTP
    StaticCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      # Waits for the static site bucket to be created before initiating
      DependsOn:
        - StaticSiteS3BucketPolicy
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                # Gets the domain name returned by StaticSiteS3Bucket's creation e.g.
                # <bucket-name>.s3-website-<AWS-region>.amazonaws.com
                Fn::Join: ["", [{"Ref": "StaticSiteS3Bucket"}, ".s3-website-", {"Ref": "AWS::Region"}, ".amazonaws.com"]]
              Id:
                # Grabs the bucket name returned by StaticSiteS3Bucket's creation
                Ref: StaticSiteS3Bucket
              CustomOriginConfig:
                # These are the ports S3 websites listen on, though 443 actually won't be
                # used due to the OriginProtocolPolicy below
                HTTPPort: 80
                HTTPSPort: 443
                # Not sure this actually matters
                OriginSSLProtocols:
                  - TLSv1.1
                  - TLSv1
                # S3 websites only operate on HTTP, so this cannot be HTTPS, though that
                # would be desired
                OriginProtocolPolicy: http-only
          # This distribution can be temporarily disabled by defining 'false' here
          Enabled: 'true'
          # Delivers the distribution over HTTP/2 with a fallback to HTTP/1.1
          HttpVersion: http2
          # Selects the regions to deploy the distribution to. By default we are just deploying
          # to US, CAN, and EU.
          PriceClass: PriceClass_100  # US, CAN, EU
          # Sets up a custom domain name for the distribution
          Aliases:
            - ${self:custom.stage.domain}
          # Attaches a custom certificate so that this distribution can use a custom domain
          ViewerCertificate:
            # Will be populated with @lunde/serverless-certificate-manager
            AcmCertificateArn: ''
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              # Can easily be changed to /error.html should you create a custom error page
              # and proper 404 code if you wish
              ResponseCode: 200
              ResponsePagePath: /index.html
          # Sets up the CF cache behaviors for objects retrieved from the origin
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            # Sets the StaticSiteS3Bucket name as its target origin ID
            TargetOriginId:
              Ref: StaticSiteS3Bucket
            ForwardedValues:
              QueryString: 'false'
              # You can optionally forward cookies to the origin server here, not necessary
              # with S3 static hosting, but could be useful if you had a lambda function
              # intermediary
              Cookies:
                Forward: none
            # Redirects HTTP requests to HTTPS so this distribution is always delivered
            # securely
            ViewerProtocolPolicy: redirect-to-https
    # Sets up Route 53 for the S3 static site CF distribution
    CloudFrontDnsRecord:
      Type: AWS::Route53::RecordSet
      # Waits for the CF distribution to finish before creating the record
      DependsOn:
        StaticCloudFrontDistribution
      Properties:
        # Sets up CloudFront as an ALIAS
        AliasTarget:
          DNSName:
            # Gets the domain name returned by StaticCloudFrontDistribution's creation
            Fn::GetAtt:
              - StaticCloudFrontDistribution
              - DomainName
          # The region where your Route 53 hosted zone exists.
          # This is the only HostedZoneId for CloudFront
          #
          # See here: https://docs.aws.amazon.com/general/latest/gr/rande.html#cf_region
          HostedZoneId: Z2FDTNDATAQYW2
        # This is the name of the hosted zone, e.g. `foo.com.`
        HostedZoneName: ${self:custom.stage.hostedZone}
        # This is the name of the A record, e.g. `www.foo.com.`
        Name: ${self:custom.stage.domain}.
        Type: 'A' <:if USE_APEX_REDIRECT:>
    # Redirects WWW to naked domain
    StaticRedirectS3Bucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        AccessControl: PublicRead
        BucketName: www.${self:custom.stage.domain}
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            Protocol: https
            HostName: ${self:custom.stage.domain}
    # DNS record for apex redirect
    StaticRedirectDnsRecord:
      Type: AWS::Route53::RecordSet
      DependsOn:
        - StaticRedirectS3Bucket
      Properties:
        AliasTarget:
          # These two values differ regionally, so make sure your values match your region
          # See here: https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints
          DNSName: s3-website-us-east-1.amazonaws.com. # us-east-1
          HostedZoneId: Z3AQBSTGFYJSTF                 # us-east-1
        HostedZoneName: ${self:custom.stage.hostedZone}
        Name:
          Ref: StaticRedirectS3Bucket
        Type: 'A'
    <:fi:>

plugins:
  - serverless-pseudo-parameters
  # Creates ACM certificates for the app domains
  - '@lunde/serverless-certificate-manager'
  # Deploys Webpack bundles to S3
  - '@lunde/serverless-bundle'

custom:
  # Stage-specific configs
  stage: ${file(./serverless.${self:provider.stage}.yml)}
  # Creates ACM certificates for the app domains
  certificateManager:
    - refFor:
        - resources.Resources.StaticCloudFrontDistribution.Properties.DistributionConfig.ViewerCertificate.AcmCertificateArn
      # Make `false` to delete this certificate on teardown
      # This is `true` by default to avoid accidentally deleting a shared certificate
      retain: true
      domains:
        <:(value += props.DOMAIN.split('.').length > 2 ? `- '*.${props.DOMAIN.split('.').slice(-1 * props.DOMAIN.length - 1).join('.')}'` : `- ${props.DOMAIN}`):>
        <:(value += props.DOMAIN.split('.').length === 2 ? `- '*.${props.DOMAIN}'` : ''):>
  # Defines settings for the application bundles
  bundle:
    'webpack.config.js':
      bucket:
        # The name of the bucket where the bundle will be deployed
        name: ${self:custom.stage.s3Bucket}
        retain: false
      # Parameters passed to the AWS.S3() constructor in aws-sdk
      params:
        maxRetries: 5
      object:
        # Excludes the stats file generated with Webpack from being synced
        '**/.cache/**':
          exclude: true
        '**/robots.txt':
          params:
            ACL: 'public-read'
            cacheControl: 'public, max-age=900'
        '**/*.html':
          params:
            ACL: 'public-read'
            # This can hypothetically be changed to something cache friendly but my default
            # preference is that the pages are always revalidated
            cacheControl: 'no-cache, must-revalidate, max-age=0'
        '*':
          key: 'assets/[filename]'
          params:
            ACL: 'public-read'
            cacheControl: 'public, immutable, max-age=31536000'
